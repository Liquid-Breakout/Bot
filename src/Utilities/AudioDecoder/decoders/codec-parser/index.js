"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.vorbisSetup = exports.vorbisComments = exports.vorbis = exports.version = exports.totalSamples = exports.totalDuration = exports.totalBytesOut = exports.subarray = exports.streamStructureVersion = exports.streamSerialNumber = exports.streamInfo = exports.streamCount = exports.segments = exports.samples = exports.sampleRate = exports.sampleNumber = exports.rawData = exports.protection = exports.profile = exports.preSkip = exports.pageSequenceNumber = exports.pageSegmentTable = exports.pageChecksum = exports.outputGain = exports.numberAACFrames = exports.mpegVersion = exports.mpeg = exports.modeExtension = exports.mode = exports.length = exports.layer = exports.isVbr = exports.isPrivate = exports.isOriginal = exports.isLastPage = exports.isHome = exports.isFirstPage = exports.isCopyrighted = exports.isContinuedPacket = exports.inputSampleRate = exports.header = exports.hasOpusPadding = exports.frameSize = exports.framePadding = exports.frameNumber = exports.frameLength = exports.frameCount = exports.frame = exports.emphasis = exports.duration = exports.description = exports["default"] = exports.data = exports.crc32 = exports.crc16 = exports.crc = exports.coupledStreamCount = exports.copyrightIdStart = exports.copyrightId = exports.codecFrames = exports.codec = exports.channels = exports.channelMode = exports.channelMappingTable = exports.channelMappingFamily = exports.bufferFullness = exports.buffer = exports.blocksize1 = exports.blocksize0 = exports.blockingStrategy = exports.blockSize = exports.bitrateNominal = exports.bitrateMinimum = exports.bitrateMaximum = exports.bitrate = exports.bitDepth = exports.bandwidth = exports.absoluteGranulePosition = void 0;
var _CodecParser = _interopRequireDefault(require("./src/CodecParser.js"));
var constants = _interopRequireWildcard(require("./src/constants.js"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
var _default = _CodecParser["default"];
exports["default"] = _default;
var absoluteGranulePosition = constants.absoluteGranulePosition;
exports.absoluteGranulePosition = absoluteGranulePosition;
var bandwidth = constants.bandwidth;
exports.bandwidth = bandwidth;
var bitDepth = constants.bitDepth;
exports.bitDepth = bitDepth;
var bitrate = constants.bitrate;
exports.bitrate = bitrate;
var bitrateMaximum = constants.bitrateMaximum;
exports.bitrateMaximum = bitrateMaximum;
var bitrateMinimum = constants.bitrateMinimum;
exports.bitrateMinimum = bitrateMinimum;
var bitrateNominal = constants.bitrateNominal;
exports.bitrateNominal = bitrateNominal;
var buffer = constants.buffer;
exports.buffer = buffer;
var bufferFullness = constants.bufferFullness;
exports.bufferFullness = bufferFullness;
var codec = constants.codec;
exports.codec = codec;
var codecFrames = constants.codecFrames;
exports.codecFrames = codecFrames;
var coupledStreamCount = constants.coupledStreamCount;
exports.coupledStreamCount = coupledStreamCount;
var crc = constants.crc;
exports.crc = crc;
var crc16 = constants.crc16;
exports.crc16 = crc16;
var crc32 = constants.crc32;
exports.crc32 = crc32;
var data = constants.data;
exports.data = data;
var description = constants.description;
exports.description = description;
var duration = constants.duration;
exports.duration = duration;
var emphasis = constants.emphasis;
exports.emphasis = emphasis;
var hasOpusPadding = constants.hasOpusPadding;
exports.hasOpusPadding = hasOpusPadding;
var header = constants.header;
exports.header = header;
var isContinuedPacket = constants.isContinuedPacket;
exports.isContinuedPacket = isContinuedPacket;
var isCopyrighted = constants.isCopyrighted;
exports.isCopyrighted = isCopyrighted;
var isFirstPage = constants.isFirstPage;
exports.isFirstPage = isFirstPage;
var isHome = constants.isHome;
exports.isHome = isHome;
var isLastPage = constants.isLastPage;
exports.isLastPage = isLastPage;
var isOriginal = constants.isOriginal;
exports.isOriginal = isOriginal;
var isPrivate = constants.isPrivate;
exports.isPrivate = isPrivate;
var isVbr = constants.isVbr;
exports.isVbr = isVbr;
var layer = constants.layer;
exports.layer = layer;
var length = constants.length;
exports.length = length;
var mode = constants.mode;
exports.mode = mode;
var modeExtension = constants.modeExtension;
exports.modeExtension = modeExtension;
var mpeg = constants.mpeg;
exports.mpeg = mpeg;
var mpegVersion = constants.mpegVersion;
exports.mpegVersion = mpegVersion;
var numberAACFrames = constants.numberAACFrames;
exports.numberAACFrames = numberAACFrames;
var outputGain = constants.outputGain;
exports.outputGain = outputGain;
var preSkip = constants.preSkip;
exports.preSkip = preSkip;
var profile = constants.profile;
exports.profile = profile;
var protection = constants.protection;
exports.protection = protection;
var rawData = constants.rawData;
exports.rawData = rawData;
var segments = constants.segments;
exports.segments = segments;
var subarray = constants.subarray;
exports.subarray = subarray;
var version = constants.version;
exports.version = version;
var vorbis = constants.vorbis;
exports.vorbis = vorbis;
var vorbisComments = constants.vorbisComments;
exports.vorbisComments = vorbisComments;
var vorbisSetup = constants.vorbisSetup;
exports.vorbisSetup = vorbisSetup;
var blockingStrategy = constants.blockingStrategy;
exports.blockingStrategy = blockingStrategy;
var blockSize = constants.blockSize;
exports.blockSize = blockSize;
var blocksize0 = constants.blocksize0;
exports.blocksize0 = blocksize0;
var blocksize1 = constants.blocksize1;
exports.blocksize1 = blocksize1;
var channelMappingFamily = constants.channelMappingFamily;
exports.channelMappingFamily = channelMappingFamily;
var channelMappingTable = constants.channelMappingTable;
exports.channelMappingTable = channelMappingTable;
var channelMode = constants.channelMode;
exports.channelMode = channelMode;
var channels = constants.channels;
exports.channels = channels;
var copyrightId = constants.copyrightId;
exports.copyrightId = copyrightId;
var copyrightIdStart = constants.copyrightIdStart;
exports.copyrightIdStart = copyrightIdStart;
var frame = constants.frame;
exports.frame = frame;
var frameCount = constants.frameCount;
exports.frameCount = frameCount;
var frameLength = constants.frameLength;
exports.frameLength = frameLength;
var frameNumber = constants.frameNumber;
exports.frameNumber = frameNumber;
var framePadding = constants.framePadding;
exports.framePadding = framePadding;
var frameSize = constants.frameSize;
exports.frameSize = frameSize;
var inputSampleRate = constants.inputSampleRate;
exports.inputSampleRate = inputSampleRate;
var pageChecksum = constants.pageChecksum;
exports.pageChecksum = pageChecksum;
var pageSegmentTable = constants.pageSegmentTable;
exports.pageSegmentTable = pageSegmentTable;
var pageSequenceNumber = constants.pageSequenceNumber;
exports.pageSequenceNumber = pageSequenceNumber;
var sampleNumber = constants.sampleNumber;
exports.sampleNumber = sampleNumber;
var sampleRate = constants.sampleRate;
exports.sampleRate = sampleRate;
var samples = constants.samples;
exports.samples = samples;
var streamCount = constants.streamCount;
exports.streamCount = streamCount;
var streamInfo = constants.streamInfo;
exports.streamInfo = streamInfo;
var streamSerialNumber = constants.streamSerialNumber;
exports.streamSerialNumber = streamSerialNumber;
var streamStructureVersion = constants.streamStructureVersion;
exports.streamStructureVersion = streamStructureVersion;
var totalBytesOut = constants.totalBytesOut;
exports.totalBytesOut = totalBytesOut;
var totalDuration = constants.totalDuration;
exports.totalDuration = totalDuration;
var totalSamples = constants.totalSamples;
exports.totalSamples = totalSamples;