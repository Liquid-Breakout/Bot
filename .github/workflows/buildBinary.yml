name: Build Worker Binary

on: workflow_dispatch

permissions:
  contents: write

jobs:
  init:
    name: Initialize
    runs-on: ubuntu-latest
    outputs:
        version: ${{ steps.get_version.outputs.current-version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Get version from package.json
        uses: martinbeentjes/npm-get-version-action@v1.3.1
        id: get_version

  build:
    needs: [init]
    strategy:
      matrix:
        include:
          - name: Windows x86_64
            runner-os: windows-latest
            artifact-name: LBBackend-Worker-${{ needs.init.outputs.version }}-windows-x86_64

          - name: Linux x86_64
            runner-os: ubuntu-latest
            artifact-name: LBBackend-Worker-${{ needs.init.outputs.version }}-linux-x86_64

          - name: Linux aarch64
            runner-os: ubuntu-latest
            artifact-name: LBBackend-Worker-${{ needs.init.outputs.version }}-linux-aarch64

    name: Build - ${{ matrix.name }}
    runs-on: ${{ matrix.runner-os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Node
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install tools / dependencies
        shell: bash
        run: npm install

      - name: Cache compiled node.js binary from nexe
        id: cache-nodejs
        uses: actions/cache@v3
        env:
          cache-name: cache-nexe-compile-output
        with:
          path: ~/.nexe
          key: ${{ runner.os }}-nodejsnexe-${{ env.cache-name }}
          restore-keys: |
            ${{ runner.os }}-nodejsnexe-

      - name: Install build tools for compiling Node.js
        shell: bash
        run: |
          if [ "${{ matrix.runner-os }}" = "windows-latest" ]; then
            choco install python python2 -y
            choco install visualstudio2019buildtools -y
            choco install visualstudio2019-workload-vctools -y
            choco install nasm -y
          fi

      - name: Create worker.env
        shell: bash
        env:
          WORKER_ENV : ${{ secrets.WORKERENV }}
        run: echo "$WORKER_ENV" >> dev_config/worker.env

      - name: Build binary with nexe
        shell: bash
        run: npm run build_app_worker

      - name: Create binary archive
        shell: bash
        run: |
          mkdir -p staging
          if [ "${{ matrix.runner-os }}" = "windows-latest" ]; then
            cp "binary/LBBackend_Worker.exe" staging/
            cd staging
            7z a ../release.zip *
          else
            cp "binary/LBBackend_Worker" staging/
            cd staging
            chmod +x LBBackend_Worker
            zip ../release.zip *
          fi

      - name: Upload binary artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact-name }}
          path: release.zip

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: ["init", "build"]
    steps:
      - name: Download binary artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./binaries

      - name: Discover binaries
        shell: bash
        run: |
          cd ./binaries
          echo ""
          echo "Binaries dir:"
          ls -lhrt
          echo ""
          echo "Searching for zipped releases..."
          for DIR in * ; do
              if [ -d "$DIR" ]; then
                  cd "$DIR"
                  for FILE in * ; do
                      if [ ! -d "$FILE" ]; then
                          if [ "$FILE" = "release.zip" ]; then
                              echo "Found zipped release '$DIR'"
                              mv "$FILE" "../$DIR.zip"
                              rm -rf "../$DIR/"
                          fi
                      fi
                  done
                  cd ..
              fi
          done
          echo ""
          echo "Binaries dir:"
          ls -lhrt
          cd ..

      - name: Create release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: ${{ needs.init.outputs.version }}
          tag_name: v${{ needs.init.outputs.version }}
          fail_on_unmatched_files: true
          files: ./binaries/*.zip
          draft: true